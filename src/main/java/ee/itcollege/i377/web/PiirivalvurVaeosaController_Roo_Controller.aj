// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package ee.itcollege.i377.web;

import ee.itcollege.i377.entities.AmetVaeosa;
import ee.itcollege.i377.entities.Piirivalvur;
import ee.itcollege.i377.entities.PiirivalvurVaeosa;
import java.io.UnsupportedEncodingException;
import java.lang.Integer;
import java.lang.Long;
import java.lang.String;
import java.util.Collection;
import javax.servlet.http.HttpServletRequest;
import javax.validation.Valid;
import org.joda.time.format.DateTimeFormat;
import org.springframework.context.i18n.LocaleContextHolder;
import org.springframework.ui.Model;
import org.springframework.validation.BindingResult;
import org.springframework.web.bind.annotation.ModelAttribute;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.util.UriUtils;
import org.springframework.web.util.WebUtils;

privileged aspect PiirivalvurVaeosaController_Roo_Controller {
    
    @RequestMapping(method = RequestMethod.POST)
    public String PiirivalvurVaeosaController.create(@Valid PiirivalvurVaeosa piirivalvurVaeosa, BindingResult bindingResult, Model uiModel, HttpServletRequest httpServletRequest) {
        if (bindingResult.hasErrors()) {
            uiModel.addAttribute("piirivalvurVaeosa", piirivalvurVaeosa);
            addDateTimeFormatPatterns(uiModel);
            return "piirivalvurvaeosas/create";
        }
        uiModel.asMap().clear();
        piirivalvurVaeosa.persist();
        return "redirect:/piirivalvurvaeosas/" + encodeUrlPathSegment(piirivalvurVaeosa.getPiirivalvurVaeosasId().toString(), httpServletRequest);
    }
    
    @RequestMapping(params = "form", method = RequestMethod.GET)
    public String PiirivalvurVaeosaController.createForm(Model uiModel) {
        uiModel.addAttribute("piirivalvurVaeosa", new PiirivalvurVaeosa());
        addDateTimeFormatPatterns(uiModel);
        return "piirivalvurvaeosas/create";
    }
    
    @RequestMapping(value = "/{piirivalvurVaeosasId}", method = RequestMethod.GET)
    public String PiirivalvurVaeosaController.show(@PathVariable("piirivalvurVaeosasId") Long piirivalvurVaeosasId, Model uiModel) {
        addDateTimeFormatPatterns(uiModel);
        uiModel.addAttribute("piirivalvurvaeosa", PiirivalvurVaeosa.findPiirivalvurVaeosa(piirivalvurVaeosasId));
        uiModel.addAttribute("itemId", piirivalvurVaeosasId);
        return "piirivalvurvaeosas/show";
    }
    
    @RequestMapping(method = RequestMethod.GET)
    public String PiirivalvurVaeosaController.list(@RequestParam(value = "page", required = false) Integer page, @RequestParam(value = "size", required = false) Integer size, Model uiModel) {
        if (page != null || size != null) {
            int sizeNo = size == null ? 10 : size.intValue();
            uiModel.addAttribute("piirivalvurvaeosas", PiirivalvurVaeosa.findPiirivalvurVaeosaEntries(page == null ? 0 : (page.intValue() - 1) * sizeNo, sizeNo));
            float nrOfPages = (float) PiirivalvurVaeosa.countPiirivalvurVaeosas() / sizeNo;
            uiModel.addAttribute("maxPages", (int) ((nrOfPages > (int) nrOfPages || nrOfPages == 0.0) ? nrOfPages + 1 : nrOfPages));
        } else {
            uiModel.addAttribute("piirivalvurvaeosas", PiirivalvurVaeosa.findAllPiirivalvurVaeosas());
        }
        addDateTimeFormatPatterns(uiModel);
        return "piirivalvurvaeosas/list";
    }
    
    @RequestMapping(method = RequestMethod.PUT)
    public String PiirivalvurVaeosaController.update(@Valid PiirivalvurVaeosa piirivalvurVaeosa, BindingResult bindingResult, Model uiModel, HttpServletRequest httpServletRequest) {
        if (bindingResult.hasErrors()) {
            uiModel.addAttribute("piirivalvurVaeosa", piirivalvurVaeosa);
            addDateTimeFormatPatterns(uiModel);
            return "piirivalvurvaeosas/update";
        }
        uiModel.asMap().clear();
        piirivalvurVaeosa.merge();
        return "redirect:/piirivalvurvaeosas/" + encodeUrlPathSegment(piirivalvurVaeosa.getPiirivalvurVaeosasId().toString(), httpServletRequest);
    }
    
    @RequestMapping(value = "/{piirivalvurVaeosasId}", params = "form", method = RequestMethod.GET)
    public String PiirivalvurVaeosaController.updateForm(@PathVariable("piirivalvurVaeosasId") Long piirivalvurVaeosasId, Model uiModel) {
        uiModel.addAttribute("piirivalvurVaeosa", PiirivalvurVaeosa.findPiirivalvurVaeosa(piirivalvurVaeosasId));
        addDateTimeFormatPatterns(uiModel);
        return "piirivalvurvaeosas/update";
    }
    
    @RequestMapping(value = "/{piirivalvurVaeosasId}", method = RequestMethod.DELETE)
    public String PiirivalvurVaeosaController.delete(@PathVariable("piirivalvurVaeosasId") Long piirivalvurVaeosasId, @RequestParam(value = "page", required = false) Integer page, @RequestParam(value = "size", required = false) Integer size, Model uiModel) {
        PiirivalvurVaeosa.findPiirivalvurVaeosa(piirivalvurVaeosasId).remove();
        uiModel.asMap().clear();
        uiModel.addAttribute("page", (page == null) ? "1" : page.toString());
        uiModel.addAttribute("size", (size == null) ? "10" : size.toString());
        return "redirect:/piirivalvurvaeosas";
    }
    
    @ModelAttribute("ametvaeosas")
    public Collection<AmetVaeosa> PiirivalvurVaeosaController.populateAmetVaeosas() {
        return AmetVaeosa.findAllAmetVaeosas();
    }
    
    @ModelAttribute("piirivalvurs")
    public Collection<Piirivalvur> PiirivalvurVaeosaController.populatePiirivalvurs() {
        return Piirivalvur.findAllPiirivalvurs();
    }
    
    @ModelAttribute("piirivalvurvaeosas")
    public Collection<PiirivalvurVaeosa> PiirivalvurVaeosaController.populatePiirivalvurVaeosas() {
        return PiirivalvurVaeosa.findAllPiirivalvurVaeosas();
    }
    
    void PiirivalvurVaeosaController.addDateTimeFormatPatterns(Model uiModel) {
        uiModel.addAttribute("piirivalvurVaeosa_alates_date_format", DateTimeFormat.patternForStyle("M-", LocaleContextHolder.getLocale()));
        uiModel.addAttribute("piirivalvurVaeosa_avatud_date_format", DateTimeFormat.patternForStyle("M-", LocaleContextHolder.getLocale()));
        uiModel.addAttribute("piirivalvurVaeosa_kuni_date_format", DateTimeFormat.patternForStyle("M-", LocaleContextHolder.getLocale()));
        uiModel.addAttribute("piirivalvurVaeosa_muudetud_date_format", DateTimeFormat.patternForStyle("M-", LocaleContextHolder.getLocale()));
        uiModel.addAttribute("piirivalvurVaeosa_suletud_date_format", DateTimeFormat.patternForStyle("M-", LocaleContextHolder.getLocale()));
    }
    
    String PiirivalvurVaeosaController.encodeUrlPathSegment(String pathSegment, HttpServletRequest httpServletRequest) {
        String enc = httpServletRequest.getCharacterEncoding();
        if (enc == null) {
            enc = WebUtils.DEFAULT_CHARACTER_ENCODING;
        }
        try {
            pathSegment = UriUtils.encodePathSegment(pathSegment, enc);
        }
        catch (UnsupportedEncodingException uee) {}
        return pathSegment;
    }
    
}
